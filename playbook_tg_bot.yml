- hosts: masters
  become: yes
  vars:
    pg_credentials: "{{ lookup('file', 'pgpass').split(':') }}"
    pg_user: "{{ pg_credentials[3] }}"
    pg_password: "{{ pg_credentials[4] }}"
  tasks:
    - name: Ensure PostgreSQL and python3-psycopg2 are installed
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
        state: present
      register: pg_install

    - name: Create necessary directories for PostgreSQL if they do not exist
      file:
        path: "{{ item }}"
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'
      loop:
        - "/var/lib/postgresql/data" 
        - "/var/lib/postgresql/data/archive"

    - name: Copy PostgreSQL config file
      template:
        src: config-postgresql
        dest: "/etc/postgresql/14/main/postgresql.conf"
      notify:
        - restart postgresql

    - name: Copy pg_hba.conf
      copy:
        src: pg_hba.conf
        dest: "/etc/postgresql/14/main/pg_hba.conf"
      notify:
        - restart postgresql

    - name: Ensure PostgreSQL is running
      service:
        name: postgresql@14-main
        state: started

    - name: Set password for PostgreSQL user postgres
      postgresql_user:
        name: postgres
        password: "{{ pg_password }}"
        role_attr_flags: SUPERUSER
        login_host: "/var/run/postgresql"  # Используем локальный сокет
        login_unix_socket: "/var/run/postgresql"  # Обходим необходимость в пароле
      become: yes
      become_user: postgres

    - name: Ensure database TG exists
      postgresql_db:
        name: TG
        state: present
        login_user: "postgres"
        login_password: "{{ pg_password }}"  # Добавляем пароль
        login_host: "127.0.0.1"
      become: yes
      become_user: postgres

    - name: Create database tables in TG
      postgresql_query:
        db: TG
        login_user: "postgres"
        login_password: "{{ pg_password }}"
        login_host: "127.0.0.1"
        query: |
          CREATE TABLE IF NOT EXISTS email (
            id SERIAL PRIMARY KEY,
            email VARCHAR(255) NOT NULL
          );
          CREATE TABLE IF NOT EXISTS phone (
            id SERIAL PRIMARY KEY,
            phone VARCHAR(255) NOT NULL
          );
      become: yes
      become_user: postgres

    - name: Insert initial data into email table
      postgresql_query:
        login_user: "{{ pg_user }}"
        login_password: "{{ pg_password }}"
        login_host: "127.0.0.1"
        db: TG
        query: INSERT INTO email (email) VALUES ('123@example.com');

    - name: Insert initial data into phone table
      postgresql_query:
        login_user: "{{ pg_user }}"
        login_password: "{{ pg_password }}"
        login_host: "127.0.0.1"
        db: TG
        query: INSERT INTO phone (phone) VALUES ('+1234567890');

  handlers:
    - name: restart postgresql
      service:
        name: postgresql@14-main
        state: restarted
    - name: reload systemd
      command: systemctl daemon-reload


- hosts: slaves
  become: yes
  vars:
    pg_credentials: "{{ lookup('file', 'pgpass').split(':') }}"
    pg_user: "{{ pg_credentials[3] }}"
    pg_password: "{{ pg_credentials[4] }}"
  tasks:
    - name: Check if PostgreSQL user exists
      become: yes
      command: getent passwd "{{ pg_user }}"
      register: pg_user_check
      ignore_errors: yes

    - name: Ensure PostgreSQL and python3-psycopg2 are installed on slave
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
        state: present 
      register: pg_slave_install
      notify:
        - restart postgresql

    - name: Set ownership and permissions on data directory, ensure directory exists
      file:
        path: /var/lib/postgresql/14/main/
        state: directory 
        owner: postgres
        group: postgres
        mode: 0700
      notify:
        - restart postgresql

    - name: Configure primary_conninfo and listen_addresses in postgresql.conf
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: "^{{ item.parameter }}"
        line: "{{ item.line }}"
        create: no
        state: present
      loop:
        - { parameter: 'listen_addresses', line: "listen_addresses = '{{ hostvars['slave'].ansible_host }}, {{ hostvars['master'].ansible_host }}'" }
        - { parameter: 'primary_conninfo', line: "primary_conninfo = 'host={{ hostvars['master'].ansible_host }} port=5432 user={{ pg_user }} password={{ pg_password }} sslmode=prefer sslcompression=1'" }
      notify:
        - restart postgresql

    - name: Clear data directory before pg_basebackup
      shell:
        cmd: |
          set -ex
          rm -rf /var/lib/postgresql/14/main/*
        executable: /bin/bash
      ignore_errors: yes

    - name: Perform pg_basebackup
      become: yes
      become_user: postgres
      shell:
        cmd: |
          set -ex
          export PGPASSWORD="{{ pg_password }}"
          pg_basebackup -R -h {{ hostvars['master'].ansible_host }} -U "{{ pg_user }}" -D /var/lib/postgresql/14/main -P
          unset PGPASSWORD
        executable: /bin/bash
      register: pg_basebackup_result

    - name: Check pg_basebackup execution
      fail:
        msg: "pg_basebackup failed to execute properly."
      when: pg_basebackup_result.rc != 0




    - name: Start PostgreSQL on slave
      service:
        name: postgresql@14-main
        state: started

  handlers:
    - name: restart postgresql
      service:
        name: postgresql@14-main
        state: restarted

- hosts: bot
  become: yes
  vars:
    repo_url: "https://github.com/BestBotPro/devopsbot.git"
    repo_version: "bot"
    bot_path: "/opt/telegram_bot"

    pg_credentials: "{{ lookup('file', 'pgpass').split(':') }}"
    TELEGRAM_TOKEN: "ADD TOKEN"
    DB_USER: "{{ pg_credentials[3] }}"
    DB_PASSWORD: "{{ pg_credentials[4] }}"
    DB_HOST: "{{ hostvars['master'].ansible_host }}"
    DB_PORT: "5432"
    DB_NAME: "TG"

  tasks:
    - name: Install Git and Python pip
      apt:
        name:
          - git
          - python3-pip
        state: present

    - name: Clone the repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ bot_path }}"
        version: "{{ repo_version }}"
        force: yes

    - name: Install Python dependencies
      pip:
        requirements: "{{ bot_path }}/requirements.txt"

    - name: Start Telegram bot
      shell: |
        export TELEGRAM_TOKEN={{ TELEGRAM_TOKEN }}
        export DB_USER={{ DB_USER }}
        export DB_PASSWORD={{ DB_PASSWORD }}
        export DB_HOST={{ DB_HOST }}
        export DB_PORT={{ DB_PORT }}
        export DB_NAME={{ DB_NAME }}
        nohup python3 {{ bot_path }}/tg_bot.py > /var/log/tg_bot.log 2>&1 &
      async: 15
      poll: 0
      become: yes
      become_user: root
